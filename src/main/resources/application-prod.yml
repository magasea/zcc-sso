server:
    port: 10002
spring:
    autoconfigure:
        exclude:
            - org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration
            - org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration
    datasource:
        password: ${env.dbpasswd}
        url: jdbc:mysql://${env.dbhost}:3306/ZCC_SSO?useUnicode=true&characterEncoding=utf-8&cachePrepStmts=true&useServerPrepStmts=true&rewriteBatchedStatements=true
        username: ${env.dbusername}
        driverClassName: com.mysql.cj.jdbc.Driver
        filters: stat
        maxActive: 20
        initialSize: 1
        maxWait: 60000
        minIdle: 1
        timeBetweenEvictionRunsMillis: 60000
        minEvictableIdleTimeMillis: 300000
        validationQuery: select 'x'
        testWhileIdle: true
        testOnBorrow: false
        testOnReturn: false
        poolPreparedStatements: true
        maxOpenPreparedStatements: 20
#    jpa:
#        generate-ddl: false
#        hibernate:
#            ddl-auto: 'none '
#            naming:
#                physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
#        properties:
#            hibernate:
#                hbm2ddl:
#                    auto: none
#        show-sql: true
    security:
        oauth2:
            client:
                registration:
                    sample:
                        client-id: sampleClientId
                        authorizedGrantTypes: implicit
                        scops: read,write
                        accessTokenValiditySeconds: 3600
                    amc-client-thirdpart:
                        client-id: amcClient3rdPartId
                        secret: secret
                        scopes: thirdpart, read
                        authorizedGrantTypes: implicit, refresh_token, client_credentials
                        redirectUris: admin,http://${env.oauth2.host}:10003/amc/login, http://${env.oauth2.host}:8080/login/oauth2/code/custom, http://${env.oauth2.host}:8080/ui-thymeleaf/login/oauth2/code/custom, http://${env.oauth2.host}:8080/authorize/oauth2/code/bael, http://${env.oauth2.host}:8080/login/oauth2/code/bael
                    amc-admin:
                        client-id: amcAdminId
                        secret: secret
                        scopes: amcAdmin,amcClient,read,write
                        authorizedGrantTypes: password, authorization_code, refresh_token, client_credentials
                        redirectUris: admin,http://${env.oauth2.host}:10003/amc/login, http://${env.oauth2.host}:8080/login/oauth2/code/custom, http://${env.oauth2.host}:8080/ui-thymeleaf/login/oauth2/code/custom, http://${env.oauth2.host}:8080/authorize/oauth2/code/bael, http://${env.oauth2.host}:8080/login/oauth2/code/bael
                    amc-client:
                        client-id: amcClientId
                        secret: secret
                        scopes: amcClient,read,write
                        redirectUris: client,http://${env.oauth2.host}:10003/amc/login
                        authorizedGrantTypes: password, authorization_code, refresh_token, client_credentials

    kafka:
        consumer:
            group-id: grp-zcc-logger
            auto-offset-reset: earliest
        # change this property if you are using your own
        # Kafka cluster or your Docker IP is different
        bootstrap-servers: ${env.kfkhost}:9092
    cache:
        cache-names: TOKEN,USER
        caffeine:
            spec: maximumSize=500, expireAfterAccess=120s
mybatis:
    type-aliases-package: com.wensheng.zcc.sso.module
    mapper-locations:
        - classpath:mappers/*Mapper.xml
        - classpath:mappers/ext/*Mapper.xml

mongodb:
#    original:
#        host: 10.20.100.235
#        port: 27017
#        database: wensheng
    wszcc_sso:
        host: ${env.mongodb-host}
        port: 27017
        database: wszcc_sso

weixin:
#    appId: wxdb885be2c95a5b32
#    appSecret: 279bfb3dd9d3e5eb43c480f625afdc0b
#    get_token_url: https://api.weixin.qq.com/cgi-bin/token
#    get_qrcode_url: https://api.weixin.qq.com/wxa/getwxacodeunlimit
    appId: wx43360e750e7099b9
    appSecret: e08507e5865fe1315e403d011693253f
    loginUrl: https://api.weixin.qq.com/sns/jscode2session?appid=${weixin.appId}&secret=${weixin.appSecret}&js_code=JSCODE&grant_type=authorization_code
    get_token_url: https://api.weixin.qq.com/cgi-bin/token
    get_qrcode_url: https://api.weixin.qq.com/wxa/getwxacodeunlimit
    open:
        appId: wx6d88c0a98ec3d700
        appSecret: acec37bccfe93dae52390e36a957bd64
        loginUrl: https://api.weixin.qq.com/sns/oauth2/access_token?appid=${weixin.open.appId}&secret=${weixin.open.appSecret}&code=%s&grant_type=authorization_code
        getUserInfoUrl: https://api.weixin.qq.com/sns/userinfo?access_token=%s&openid=$s

message:
    url: http://esms100.10690007.net/sms/mt
    spid: 9346
    sppassword: xuKh9a8u
    commond: MT_REQUEST
    multiCommond: MULTI_MT_REQUEST



logging:
    level:
        com:
            wensheng: TRACE
        root: WARN


env:
    name: prod
    dbhost: 10.20.100.238
    dbusername: ssouser
    dbpasswd: Wensheng#123
    kfkhost: 10.20.100.238
    mongodb-host: 10.20.100.238
    oauth2:
        host: 10.20.100.238
        authLink: http://${env.oauth2.host}:10002